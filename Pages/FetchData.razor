@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BlazorApp.Data
@inject WeatherForecastService ForecastService
@inject IJSRuntime JS
@implements IDisposable

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th></th>
                <th>Temp. (C)</th>
                <th></th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>
                        <canvas data-width="100" 
                                data-type="linear-gauge" 
                                data-units="°C" 
                                data-min-value="-20" 
                                data-max-value="60" 
                                data-major-ticks="-20, -10, 0, 10, 20, 30, 40, 50, 60"
                                data-value="@forecast.TemperatureC"
                        ></canvas>
                    </td>
                    <td>@forecast.TemperatureC</td>
                    <td>
                        <canvas data-width="100" 
                                data-type="linear-gauge" 
                                data-units="°F" 
                                data-min-value="-10" 
                                data-max-value="150" 
                                data-major-ticks="-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 130, 140, 150"
                                data-value="@forecast.TemperatureF"
                        ></canvas>                    
                    </td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td><button onclick="calculateAverages()">Averages</button></td>
                <td></td>
                <td id="avgC"></td>
                <td></td>
                <td id="avgF"></td>
                <td></td>
                <td></td>
            </tr>
        </tfoot>
    </table>
    <div @ref=graphPlaceholder></div>
}

@code {
    private static WeatherForecast[] forecasts;
    private ElementReference graphPlaceholder;
    private DotNetObjectReference<FetchData> objRef;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("populateObjectRef", objRef);
        }
    }

    [JSInvokable]
    public static async Task<decimal[]> CalculateAveragesAsync()
    {
        var forecastTemperatures = from f in forecasts
                                   select (f.TemperatureF, f.TemperatureC);

        var avgF = await Task.FromResult(forecastTemperatures.Average(t => t.TemperatureF));
        var avgC = await Task.FromResult(forecastTemperatures.Average(t => t.TemperatureC));

        return new[] { (decimal)avgF, (decimal)avgC };
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
